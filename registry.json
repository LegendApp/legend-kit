{
  "updatedAt": "2025-03-19T04:47:08.491Z",
  "packages": [
    {
      "name": "isWindowFocused$",
      "version": "1.0.0",
      "type": "observable",
      "platform": "web",
      "dependencies": [],
      "imports": [],
      "pro": false,
      "description": "An observable that is true if the window is focused",
      "dir": "web",
      "file": "isWindowFocused$.ts",
      "sha": "0d03ada2d3fd14aca6332c051bc5166b3226c6b68fb2fee1fa7075d32a9a44b3"
    },
    {
      "name": "useElementScroll",
      "version": "1.0.0",
      "type": "hook",
      "platform": "web",
      "dependencies": [],
      "imports": [],
      "pro": false,
      "description": "A hook that creates an observable with the scroll value of an element",
      "dir": "web",
      "file": "useElementScroll.ts",
      "sha": "61d4d9185b51bd763e54ff1bb741aef3bede59958a2a5ec1e7b48955d5ad94e9"
    },
    {
      "name": "useElementIsScrolled",
      "version": "1.0.0",
      "type": "hook",
      "platform": "web",
      "dependencies": [],
      "imports": [],
      "pro": false,
      "description": "A hook that creates an observable that is true if an element is scrolled",
      "dir": "web",
      "file": "useElementIsScrolled.ts",
      "sha": "2a087220ea3e323aa1804d20e42905bd39f737005de11174c06b6237274907da"
    },
    {
      "name": "windowDimensions",
      "version": "1.0.0",
      "type": "utility",
      "platform": "rn",
      "dependencies": [],
      "imports": [
        "react/HookToObservable"
      ],
      "pro": false,
      "description": "Window dimensions as an observable",
      "dir": "rn",
      "file": "windowDimensions.tsx",
      "sha": "b04f95ec27c125fac50b8c40c305c3d41c8e66ecb7dddefd4618920da1cc09da"
    },
    {
      "name": "now",
      "version": "1.0.0",
      "type": "utility",
      "platform": "all",
      "dependencies": [],
      "imports": [],
      "pro": false,
      "description": "Observables for current time, hour, and day",
      "dir": "utilities",
      "file": "now.ts",
      "sha": "0625bfbe0f34c60aafeadebc9c31e12b22135f595578fc209ae92740dbdd2a8f"
    },
    {
      "name": "stringAsRecord",
      "version": "1.0.0",
      "type": "linked",
      "platform": "all",
      "dependencies": [],
      "imports": [],
      "pro": false,
      "description": "JSON parse a string as a record",
      "dir": "as",
      "file": "stringAsRecord.ts",
      "sha": "573d9aa6a305fec5ad358ab09c8b4b1bd876c5b700e17e7f732448d61e707011"
    },
    {
      "name": "stringAsArray",
      "version": "1.0.0",
      "type": "linked",
      "platform": "all",
      "dependencies": [],
      "imports": [],
      "pro": false,
      "description": "JSON parse a string as an array",
      "dir": "as",
      "file": "stringAsArray.ts",
      "sha": "c2db6960af1294e593b557e60287211c88419c62a3d602191ad11b361fc9d5ed"
    },
    {
      "name": "numberAsString",
      "version": "1.0.0",
      "type": "linked",
      "platform": "all",
      "dependencies": [],
      "imports": [],
      "pro": false,
      "description": "Convert a number to a string",
      "dir": "as",
      "file": "numberAsString.ts",
      "sha": "831018ef07d93a7afe36a80e7aac57c24f343df37caef3561f2aa66eb8f1686b"
    },
    {
      "name": "stringAsSet",
      "version": "1.0.0",
      "type": "linked",
      "platform": "all",
      "dependencies": [],
      "imports": [],
      "pro": false,
      "description": "JSON parse a string as a set",
      "dir": "as",
      "file": "stringAsSet.ts",
      "sha": "ca61670625964ff79a9ac9e4a1dc456ccf4a506e34f42b0ad673894b4c6394ac"
    },
    {
      "name": "HookToObservable",
      "version": "1.0.0",
      "type": "utility",
      "platform": "all",
      "dependencies": [],
      "imports": [],
      "pro": false,
      "description": "Convert a hook to an observable",
      "dir": "react",
      "file": "HookToObservable.tsx",
      "sha": "463d2ec2195dc9912ab30ab2a13d963fa611b658fcfd518fe0a83d45b2d0809f"
    },
    {
      "name": "createDraft",
      "version": "1.0.0",
      "type": "utility",
      "platform": "all",
      "dependencies": [],
      "imports": [],
      "pro": true,
      "description": "Create a draft state that can be committed or discarded",
      "dir": "utilities",
      "file": "createDraft.ts",
      "sha": "21f7104a21d3e23186e19cce006a9858d0bfc6413ddb5f3ec6f575b558577db4"
    },
    {
      "name": "keysPressed$",
      "version": "1.0.0",
      "type": "observable",
      "platform": "web",
      "dependencies": [],
      "imports": [],
      "pro": true,
      "description": "An observable containing all currently pressed keys",
      "dir": "utilities",
      "file": "keysPressed$.ts",
      "sha": "96954913f18f8ec1e78f2f82361b723db1a3e4cb8ffe614c2b5b5099a91372a7"
    },
    {
      "name": "onHotkeys",
      "version": "1.0.0",
      "type": "utility",
      "platform": "web",
      "dependencies": [],
      "imports": [
        "keysPressed$"
      ],
      "pro": true,
      "description": "Listen for hotkeys",
      "dir": "utilities",
      "file": "onHotkeys.ts",
      "sha": "446197f418f33079f328c34571a92596cddd2037b49eb9882f9afddf7e3997ec"
    },
    {
      "name": "useDraft",
      "version": "1.0.0",
      "type": "hook",
      "platform": "all",
      "dependencies": [],
      "imports": [
        "utilities/createDraft"
      ],
      "pro": true,
      "description": "A hook that creates a draft state that can be committed or discarded",
      "dir": "hooks",
      "file": "useDraft.ts",
      "sha": "2652f5b3415c4142c2326775a4eff93bc83ff95527092451b6f3fac214b3641e"
    },
    {
      "name": "useOnHotkeys",
      "version": "1.0.0",
      "type": "hook",
      "platform": "web",
      "dependencies": [],
      "imports": [
        "utilities/onHotkeys"
      ],
      "pro": true,
      "description": "A hook that creates an observable with the scroll value of an element",
      "dir": "hooks",
      "file": "useOnHotkeys.ts",
      "sha": "74152a73c8e2b65407804e5b76fecd88fc453e3f5b3914fc46e47df725173892"
    },
    {
      "name": "useBreakpoints",
      "version": "1.0.0",
      "type": "hook",
      "platform": "rn",
      "dependencies": [],
      "imports": [],
      "pro": true,
      "description": "A hook that returns the current breakpoint based on window width",
      "dir": "hooks",
      "file": "useBreakpoints.ts",
      "sha": "fcb367117e65a3068bd33f2f833fe91d08868e7313cd08f81c779be410eb16a2"
    }
  ]
}